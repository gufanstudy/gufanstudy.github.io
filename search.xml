<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>报错集</title>
      <link href="/2022/05/07/%E6%8A%A5%E9%94%99%E9%9B%86/"/>
      <url>/2022/05/07/%E6%8A%A5%E9%94%99%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="TypeError类型错误"><a href="#TypeError类型错误" class="headerlink" title="TypeError类型错误"></a>TypeError类型错误</h3><p><strong>TypeError</strong>: urlopen() got an unexpected keyword argument ‘headers’</p><blockquote><p>原因：</p><p>urlopen()不支持headers参数</p></blockquote><blockquote><p>解决方案：</p><p>使用urllib.request.Request()</p></blockquote><p><strong>TypeError</strong>: can’t concat str to bytes</p><p><img src="https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/image-20220514010111144.png" alt="image-20220514010111144"></p><p><img src="C:\Users\20819\AppData\Roaming\Typora\typora-user-images\image-20220514010220049.png" alt="image-20220514010220049"></p><blockquote><p>原因:</p><p>data参数需要的是字节,而不是字符串</p></blockquote><blockquote><p>解决方案:</p><p>bytes()强制转换为字节</p></blockquote><p><strong>TypeError</strong>: string argument without an encoding</p><p><img src="https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/image-20220514004949882.png" alt="image-20220514004949882"></p><blockquote><p>原因:</p><p>字符串类型转换为字节时 没有编码</p></blockquote><blockquote><p>解决方案:</p><p>bytes(data,’utf-8’)</p></blockquote><p><strong>TypeError</strong>: string indices must be integers</p><p><img src="https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/image-20220514013725881.png" alt="image-20220514013725881"></p><blockquote><p>原因:</p><p>字符串的下标必须是整数</p></blockquote><blockquote><p>解决方案:</p><p>将使用 json.loads() 读取json字符串</p></blockquote><h3 id="UnicodeEncodeError编码错误"><a href="#UnicodeEncodeError编码错误" class="headerlink" title="UnicodeEncodeError编码错误"></a>UnicodeEncodeError编码错误</h3><p><strong>UnicodeEncodeError</strong>: ‘ascii’ codec can’t encode characters in position 10-12: ordinal not in range(128)</p><p><img src="https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/image-20220512213833933.png"></p><blockquote><p>原因：</p><p>url地址带有中文</p></blockquote><blockquote><p>解决方案：</p><p>把中文处理成 百分号 + 十六进制 的形式</p></blockquote><h3 id="ProxyError代理错误"><a href="#ProxyError代理错误" class="headerlink" title="ProxyError代理错误"></a>ProxyError代理错误</h3><p><strong>ProxyError</strong>: HTTPConnectionPool(host&#x3D;’118.180.166.195’, port&#x3D;8060): Max retries exceeded with url: <a href="http://httpbin.org/ip">http://httpbin.org/ip</a> (Caused by ProxyError(‘Cannot connect to proxy.’, NewConnectionError(‘&lt;urllib3.connection.HTTPConnection object at 0x000001B7407D7220&gt;: Failed to establish a new connection: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。’)))</p><p><img src="https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/image-20220515011902544.png" alt="image-20220515011902544"></p><blockquote><p>原因：</p><p>代理ip无法使用</p></blockquote><blockquote><p>解决方案：</p><p>换可以使用的代理ip</p></blockquote><h3 id="SSLError数字证书错误"><a href="#SSLError数字证书错误" class="headerlink" title="SSLError数字证书错误"></a>SSLError数字证书错误</h3><p><strong>SSLError</strong>: HTTPSConnectionPool(host&#x3D;’<a href="http://www.chinatax.gov.cn&/#39;">www.chinatax.gov.cn&#39;</a>, port&#x3D;443): Max retries exceeded with url: &#x2F; (Caused by SSLError(SSLCertVerificationError(1, ‘[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate in certificate chain (_ssl.c:1129)’)))</p><p><img src="https://blog-img-1311712983.cos.ap-nanjing.myqcloud.com/image-20220515130457791.png" alt="image-20220515130457791"></p><blockquote><p>原因：</p><p>网站没有SSL证书</p></blockquote><blockquote><p>解决方案：</p><p>将verify（默认true）设为false</p></blockquote><h3 id="InvalidURL无效网址"><a href="#InvalidURL无效网址" class="headerlink" title="InvalidURL无效网址"></a>InvalidURL无效网址</h3><p><strong>InvalidURL</strong>: Proxy URL had no scheme, should start with http:&#x2F;&#x2F; or https:&#x2F;&#x2F;</p><blockquote><p>原因：</p><p>python3.6以后，由于底层修改了url解析模式，导致proxy代理解析失败导致的</p></blockquote><blockquote><p>解决方案：</p><p>如果不使用代理，那么就可以改成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;http&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;https&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">request.get(url,proxies=proxies)</span><br></pre></td></tr></table></figure><p>如果使用代理的话，就可以修改成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;http&quot;</span>:<span class="string">&quot;[http://127.0.0.1:1080&quot;</span>,](http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span><span class="string">&quot;,/)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>https<span class="string">&quot;:&quot;</span>[https://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span>](https://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span>/)<span class="string">&quot;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，一定要写成http:&#x2F;&#x2F;+ip+port这种形式，不能去掉前面的http:&#x2F;&#x2F;，否则就会产生错误。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫(二)：前导知识</title>
      <link href="/2022/05/07/Python%E7%88%AC%E8%99%AB(%E4%BA%8C)%E5%89%8D%E5%AF%BC%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/05/07/Python%E7%88%AC%E8%99%AB(%E4%BA%8C)%E5%89%8D%E5%AF%BC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><ul><li>每个应用程序都有自己的独立标识，那么这个表示我们称之为端口</li></ul><h4 id="通讯协议"><a href="#通讯协议" class="headerlink" title="通讯协议"></a>通讯协议</h4><ul><li>国际组织定义了通讯协议 TCP&#x2F;IP协议</li><li>所谓协议就是计算机共同遵守的规定或规则</li><li>HTTP协议（超文本传输协议）（一种通讯协议）（端口号：80）</li></ul><h4 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h4><ul><li>HTTPS &#x3D; HTTP + SSL （端口：443）（以安全为目标的HTTP通道）</li></ul><h4 id="HTTP的请求和响应"><a href="#HTTP的请求和响应" class="headerlink" title="HTTP的请求和响应"></a>HTTP的请求和响应</h4><p>General 全部的</p><p>Request URL 请求的地址</p><p>Request Method 请求方法，一般情况下网站上是什么方式，爬虫代码就写什么请求方式，但是具体情况具体分析</p><p>Status Code 状态码</p><p>如果是静态网页，数据都在源码里面</p><p>如果是动态网页，这个Request URL的去分析，查找response，去看响应结果</p><p>Response Header 服务器的响应</p><p>Request Headers 客户端的请求</p><blockquote><p>重要参数：</p><p>get 请求的方法 以及目标url参数 一般不加</p><p>Host 主机端口号、域名 可加可不加</p><p>Connection keep-alive 保持长连接 一般不加</p><p>Uer-Agent 用户代理 防止网站来检查ua 反反爬的第一步 加</p><p>Accept-Encoding 不要添加 数据会有问题</p><p>Cookie 记录用户相关信息（加不加视情况而定）（有时间限制）</p><p>referer  表明当前页面从哪个页面过来 视情况而定 有时间限制</p></blockquote><p>Query String Parameters 参数 （在Payload页面下）</p><h4 id="爬虫介绍"><a href="#爬虫介绍" class="headerlink" title="爬虫介绍"></a>爬虫介绍</h4><h4 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h4><ul><li>简单一句话 就是代替人去模拟浏览器进行网页操作</li></ul><h4 id="为什么需要爬虫"><a href="#为什么需要爬虫" class="headerlink" title="为什么需要爬虫"></a>为什么需要爬虫</h4><ul><li><p>为其它的程序提供数据源（搜索引擎、应用）</p></li><li><p>数据分析</p><blockquote><p>快乐 采风 高校 风景 …… 种类 收藏 多少会有点不同 视频 你喜欢什么？ 数据—&gt;分析</p><p>抖音广告越来越多 直播带货非常火 原因是什么？</p><ul><li>流量大</li><li>变现</li><li>热度 非常活跃</li></ul></blockquote></li><li><p>人工智能</p><ul><li><p>学习人工智能（门槛太高）</p><blockquote><p>1.Python高级开发水平</p><p>2.数学基础</p></blockquote></li><li><p>科技公司 高等大学</p></li><li><p>智能家居 无人驾驶 人脸识别 智能语言……</p></li></ul></li><li><p>……</p></li></ul><h4 id="公司获取数据的方式"><a href="#公司获取数据的方式" class="headerlink" title="公司获取数据的方式"></a>公司获取数据的方式</h4><ul><li>公司自有的</li><li>第三方数据平台<ul><li>免费的 百度指数</li><li>付费的 数据堂</li></ul></li><li>爬虫爬取的数据</li></ul><h4 id="Python做爬虫的优势"><a href="#Python做爬虫的优势" class="headerlink" title="Python做爬虫的优势"></a>Python做爬虫的优势</h4><ul><li>PHP：对多线程、异步支持不太好</li><li>Java：代码量大、打码笨重</li><li>C&#x2F;C++：代码量大，难以编写</li><li>Python：支持模块多、代码简洁、开发效率高（scrapy框架）</li></ul><h4 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h4><ul><li>通用网络爬虫 例如 百度 谷歌</li><li>聚焦网络爬虫  根据既定的目标 有选择的抓取某一特定主题的内容</li></ul><h4 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h4><p>get和post方法</p><ul><li><p>get特点</p><blockquote><p>一般情况下只从服务器获取数据，没有对服务器产生影响，通常都是get请求</p><p>请求参数可以在url地址上显示出来</p></blockquote></li><li><p>post特点</p><blockquote><p>向服务器发送数据（登录、上传文件……）</p><p>会对服务器产生影响那么通常都是使用的是post请求</p><p>请求参数不会再url地址之上显示出来</p></blockquote></li></ul><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>全球统一资源定位符</p><p><a href="https://gufanstudy.github.io/archives/">https://gufanstudy.github.io/archives/</a></p><blockquote><p>https 网络协议</p><p>gufanstudy.github.io 域名</p><p>archives&#x2F; 访问资源路径</p><p>anchor 锚点（前端页面定位）</p></blockquote><h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h4><p>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;101.0.4951.54 Safari&#x2F;537.36</p><p>作用：记录了用户的浏览器，操作系统登，为了让用户更好的获取HTML页面效果</p><p>一般会作为反反爬的第一步，80%的网站都会检查</p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>记录用户相关的信息</p><p>http本身是无状态的，服务器无法判断用户的身份。对同一个网站发起多次请求，服务器无法判断是否来自同一个人</p><p>作用：</p><ul><li>反反爬</li><li>模拟登录</li></ul><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>部分：</p><ul><li>200：请求成功</li><li>301：永久重定向</li><li>302：临时重定向</li><li>404：请求失败</li><li>500：服务器内部请求</li></ul><p>重定向：</p><p>一个网址定向到另一个网址</p><h4 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h4><p>谷歌浏览器自带，右键-检查 或 F12</p><p>Elements 元素</p><blockquote><p>网页源代码 最终渲染结</p><p>用于提取数据 分析数据</p></blockquote><p>Console 控制台</p><blockquote><p>后期分析JS代码，根据打印结果，分析代码</p><p>前期用不到</p></blockquote><p>Sources 资源</p><blockquote><p>信息的来源</p><p>整个网站加载的资源</p><p>分析JS代码时使用，调试，打断点</p><p>前期用不到</p></blockquote><p>Network 网络工作</p><blockquote><p>数据抓包</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫(一)：学习路线</title>
      <link href="/2022/05/06/Python%E7%88%AC%E8%99%AB(%E4%B8%80)%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2022/05/06/Python%E7%88%AC%E8%99%AB(%E4%B8%80)%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><blockquote><p>打铁还需自身硬</p><p>前置要求：掌握Python基础知识</p></blockquote><ul><li><p>知识点+案例 为驱动</p></li><li><p>第一阶段：爬虫核心</p><ul><li><p>爬虫的前导知识</p></li><li><p>爬虫网络请求模块（uellib requests）</p></li><li><p>数据解析（正则 xpath bas4）</p></li></ul></li><li><p>第二阶段：爬虫进阶</p><ul><li><p>selenium(自动化的测试工具)</p></li><li><p>动态数据</p></li><li><p>多线程</p></li><li><p>增加爬取的效率</p></li><li><p>队列</p></li></ul></li><li><p>第三阶段：Scrapy框架和分布式爬虫</p><ul><li>如何使用Scrapy框架</li><li>分布式爬虫工作流程以及如何把一个普通的爬虫改写成分布式爬虫</li></ul></li><li><p>第四阶段：数据存储</p><ul><li>CSV</li><li>redis</li><li>mongodb（重点）</li></ul></li><li><p>第五阶段：移动开发</p><ul><li>前导知识（Android）（mainactivity listview textview）</li><li>fiddler抓包工具</li><li>爬取移动端数据</li></ul></li><li><p>第六阶段：反爬策略</p><ul><li>字体反爬</li><li>代理IP（免费代理IP 失效率低 响应慢）（购买IP）</li><li>复杂验证码（图片验证 tessertact 行为验证 打码平台）</li><li>JS反爬（门槛相当高 起码掌握JS基础 分析维度比较高 案例 总结套路 常见算法了解）</li></ul></li></ul><blockquote><p>PS：</p><p>​懂了</p><p>​不代表会了</p></blockquote><blockquote><p>学习方法：</p><p>​百度  未知的 不明确的 找资料</p><ul><li>准备报错集</li><li>解决方案文档</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传统人脸识别方法介绍</title>
      <link href="/2022/05/03/%E4%BC%A0%E7%BB%9F%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/05/03/%E4%BC%A0%E7%BB%9F%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="基于几何特征的方法"><a href="#基于几何特征的方法" class="headerlink" title="基于几何特征的方法"></a>基于几何特征的方法</h3><p>基于几何特征的方法是最早、最传统的方法，该方法是通过提取人脸的几何特征，包括人脸部件的归一化的点间距离、比率以及人脸的一些特征点，如眼角、嘴角、鼻尖等部位所构成的二维拓扑结构进行识别的方法。主要代表是MIT的Bruelli和Poggio小组,他们采用改进的积分投影法提取出用欧氏距离表征的35维人脸特征矢量用于模式分类。几何特征方法利用的是单纯的几何信息，其优点是所需的存储空间和分类时间代价比较小，而且在图像分辨率较低的情况下仍然可以使用。缺点是识别的准确率完全依赖于几何特征的准确提取，而几何特征本身容易受姿态和表情变化的影响，稳定性不高。即使几何特征提取准确，仍然可能因为有较大的变化而导致分类错误。因此，目前单纯利用几何特征的人脸识别方法已经不常使用了，但几何特征仍然可以作为其它特征的有益补充。</p><blockquote><p>优点：</p><p>所需存储空间和分类时间代价比较小</p><p>在图像分辨率低的情况下也可以使用</p></blockquote><blockquote><p>缺点：</p><p>不稳定</p><p>精度完全依赖几何特征的准确提取，容易受人脸的姿态和表情影响目前很少单独使用</p><p>往往作为其他特征的补充</p></blockquote><h3 id="基于模板匹配的方法"><a href="#基于模板匹配的方法" class="headerlink" title="基于模板匹配的方法"></a>基于模板匹配的方法</h3><p>模板匹配的方法是模式识别中所采用方法中最传统的方法之一，该方法主要是利用计算模板和图像灰度的自相关性来实现识别功能的。主要代表是Yuille,他采用弹性模板来提取眼睛和嘴巴的轮廓。在人脸识别问题中，模板既可以是整个人脸图像构成的单-模板，也可以是不同局部特征子图像构成的多个模板的组合。分类时，将待识别图像与所有已知图像进行匹配，根据最终匹配得分进行分类。Brunelli 在1993 年对基于几何特征的方法和模板匹配的方法进行了较全面的介绍和比较后认为,模板匹配的方法优于几何特征的方法.但是，模板匹配的方法由于利用了相关性信息，对光照、旋转和表情变化比较敏感。另外，模板匹配的计算量比较大，多尺度、多模板的使用会增加计算和存储的复杂度。</p><blockquote><p>优点：</p><p>优于几何特征信息</p></blockquote><blockquote><p>缺点：</p><p>由于利用了相关信息，对光照、旋转和表情变化比较敏感</p><p>计算量大，在多尺度、多模板的情况下会增加计算和存储的复杂性</p></blockquote><h3 id="基于统计的方法"><a href="#基于统计的方法" class="headerlink" title="基于统计的方法"></a>基于统计的方法</h3><p>基于统计的方法是现代人脸识别方法中比较经典且常见的，包括特征脸Eganc方法和隐马尔可夫模型(iden Mantov Mole等方法。基于统计的方法将人险用代数特征矢量表示。这类方法利用统计策略从整个训练图像集合提取统计特征后，通过匹配学习找出人脸和非人脸以及不同人脸之间的联系，并不要求单独抽取眼睛、鼻子等面部特征，从原理上更为先进合理，实验中也表现出更好的识别效果。</p><h4 id="——K-L变换的特征脸"><a href="#——K-L变换的特征脸" class="headerlink" title="——K-L变换的特征脸"></a>——K-L变换的特征脸</h4><p>特征脸方法,也称为主分量分析(PCA)方法。srvich和Kiby)首先将K-L变换用于人脸图像的最优表示，Turk 受其启发，将包含人脸的图像区域看作是一种随机向量， 通过KL变换获得其正交基底，并利用重构权向量作为识别用的特征，从而提出了“特征脸”方法。该方法具有简单有效的特点，目前已成为事实上的基准测试算法。本文的第三章将重点讨论此方法的具体应用。特征脸方法的重要贡献不仅在于它为基于图像的目标识别提供了一一种普遍的方法， 而且降维和特征提取这种思想为目标识别提供了- -种方法论。但是在人脸识别问题上，它的不足之处是受表情变化、光照角度、强度变化和视角变化等严重影响，鲁棒性较差。因此,研究者在此基础上发展了许多改进方案，如Behumer提出的Fisher脸方法,特征半脸方法四等。</p><blockquote><p>优点：</p><p>简单有效</p></blockquote><blockquote><p>缺点：</p><p>鲁棒性差，易受表情、光照、角度等因素影响</p></blockquote><h4 id="——隐马尔可夫模型"><a href="#——隐马尔可夫模型" class="headerlink" title="——隐马尔可夫模型"></a>——隐马尔可夫模型</h4><p>隐马尔可夫模型是用于描述信号统计特征的一组统计模型， 作为一种语音识别的方法取得了很好的效果。近年来越来越多的研究工作者将这种方法运用到人脸识别当中。Samaria,叫最早建议了关于人脸的一维隐马尔可夫模型，他用一个矩形窗从上到下采样人脸图像,用灰度值作为观察序列.Netan发展了Samria的方法，用39个2D-0T系数代替灰度值作为观察序列，在一定程度上解决了Samaria方法要求大存储空间的不足。并且有效地提高了识率。</p><blockquote><p>优点：</p><p>在一定程度上解决了Samaria方法要求大存储空间的不足。并且有效地提高了识率。</p></blockquote><h3 id="基于链接机制的方法"><a href="#基于链接机制的方法" class="headerlink" title="基于链接机制的方法"></a>基于链接机制的方法</h3><p>基于连接机制的方法，包括一般的神经网络(Neural Network)方法和弹性图匹配(Elastic Graph Matching)方法21。基于神经网络的方法是最近几年比较活跃的一个研究方向。神经网络由于其固有的并行运算机制以及对于模式的分布式全局存储，在人脸识别上比其它类别的方法有独到的优势，它避免了复杂的特征提取作，通过学习的过程获得其它方法难以实现的关于人脸识别规律和规则的隐性表达，而且不受模式形变的影响。最早应用神经网络进行人脸识别工作的Kohonen,利用网络的联想能力回忆人脸，当输入图像噪音很多或部分图像丢失时，也能回忆出准确的人脸。但是该方法通常将人脸作为一个- -维向量输入，如一幅不大100x100的图像为10000维，这样神经网络的输入节点将很庞大，因此实际训练网络的时候参数繁多，实现起来很困难。同时该方法要求训练样本比较充分才能得到较好的识别效果，否则在光照、尺度变化以及小的形变情况下都不能很好地识别。</p><h4 id="——动态链接的弹性图匹配"><a href="#——动态链接的弹性图匹配" class="headerlink" title="——动态链接的弹性图匹配"></a>——动态链接的弹性图匹配</h4><p>弹性图匹配方法是一-种基于动态链接结构的方法。该方法在二维空间中定义了一种对 于通常的人脸变形具有一定的不变性的距离，并采用属性拓扑图来代表人脸，拓扑图的任一项点均包含特征向量，用来记录人脸在该项点位置附近的特征信息，然后利用弹性匹配法将库中人脸和待识别人脸的弹性图进行匹配，找到匹配程度最高的一个人脸图像。该方法结合了灰度特性和几何因素，在匹配时允许图像存在弹性形变，对人脸较小角度的旋转、表情以及光照变化等都有较好的容忍性，但是与特征脸识别方法相比识别速度较慢。</p><blockquote><p> 优点：</p><p>结合了灰度特性和几何因素，允许图像存在形变，对小角度旋转、表情和光照变化有较好的容忍性</p></blockquote><blockquote><p>缺点：识别速度较慢</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 素材 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
